#ifndef MATERIAL_HPP
#define MATERIAL_HPP

//#include "color.h"
#include "ray.h"
#include "hittable.h"
//#include "texture.h"

struct hit_record;
__device__ bool refract(const vec3& v, const vec3& n, float ni_over_nt, vec3& refracted) {
    vec3 uv = unit_vector(v);
    float dt = dot(uv, n);
    float discriminant = 1.0f - ni_over_nt*ni_over_nt*(1-dt*dt);
    if (discriminant > 0) {
        refracted = ni_over_nt*(uv - n*dt) - n*sqrt(discriminant);
        return true;
    }  
    else
        return false;
}
     
class material {
    public:
        __device__ virtual bool scatter(
            const ray &r_in, const hit_record &rec, color &attenuation, ray &scattered, curandState *st
        ) const = 0;
};

class lambertian: public material {
    public:
        __device__ lambertian(const color &a): albedo(a) {}
        __device__ virtual bool scatter(
            const ray &r_in, const hit_record &rec, color &attenuation, ray &scattered, curandState *st
        ) const override {
            (void)(r_in);
            auto scatter_direction = rec.normal + random_in_unit_sphere(st);
            scattered = ray(rec.p, scatter_direction - rec.p);
            attenuation = albedo;
            return true;
        }
    
    public:
        color albedo;
};

class metal: public material {
    public:
        __device__ metal(const color &a, float f): albedo(a), fuzz(f < 1 ? f: 1) {}

        __device__ virtual bool scatter(
            const ray &r_in, const hit_record &rec, color &attenuation, ray &scattered, curandState *st
        ) const override {
            vec3 reflected = reflect(unit_vector(r_in.direction()), rec.normal);
            scattered = ray(rec.p, reflected+ (fuzz * random_in_unit_sphere(st)));
            attenuation = albedo;
            return (dot(scattered.direction(), rec.normal) > 0);
        }
   public:
        color albedo;
        float fuzz;
};


class dielectric: public material {
    public:
    __device__ dielectric(float index_of_refraction): ir(index_of_refraction) {}
    
    __device__ virtual bool scatter(
        const ray &r_in, const hit_record &rec, color &attenuation, ray &scattered, curandState *st
    ) const override {
        vec3 outward_normal;
        vec3 reflected = reflect(r_in.direction(), rec.normal);
        vec3 refracted;
        float ni_over_nt;
        attenuation = color(1.0, 1.0, 1.0);
        float reflect_prob;
        float refraction_ratio = rec.front_face ? (1.0/ir):ir;
        float cosine;
        if(dot(r_in.direction(), rec.normal) > 0.0f) {
            outward_normal = vec3(0, 0, 0) - rec.normal;
            ni_over_nt = ir;
            cosine = dot(r_in.direction(), rec.normal) / r_in.direction().length();
            cosine = sqrt(1.0f - ir*ir*(1-cosine*cosine));
        } else {
            outward_normal = rec.normal;
            ni_over_nt = 1.0f / ir;
            cosine = -dot(r_in.direction(), rec.normal) / r_in.direction().length();
        }

        if (refract(r_in.direction(), outward_normal, ni_over_nt, refracted))
            reflect_prob = reflectance(cosine, ir);
        else
            reflect_prob = 1.0f;

        if(random_double(st) < reflect_prob)
            scattered = ray(rec.p, reflected);
        else 
            scattered = ray(rec.p, refracted);
        return true;
    }
    public:
        float ir;

    private: 
        __device__ static float reflectance(float cosine, float ref_idx) {
            float r0 = (1-ref_idx) / (1+ ref_idx);
            r0 = r0*r0;
            return r0 + (1-r0)*powf((1 - cosine), 5);
        }
};
#endif 
